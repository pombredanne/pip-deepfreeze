import subprocess
import sys
import textwrap

import pytest
from typer.testing import CliRunner

from pip_deepfreeze.__main__ import app


def test_sync(virtualenv_python, testpkgs, tmp_path):
    (tmp_path / "requirements.txt.in").write_text(
        textwrap.dedent(
            f"""\
            --pre
            --find-links {testpkgs}
            pkga<1
            """
        )
    )
    (tmp_path / "setup.py").write_text(
        textwrap.dedent(
            """\
            from setuptools import setup

            setup(name="theproject", install_requires=["pkgb"])
            """
        )
    )
    subprocess.check_call(
        [sys.executable, "-m", "pip_deepfreeze", "--python", virtualenv_python, "sync"],
        cwd=tmp_path,
    )
    assert (tmp_path / "requirements.txt").read_text() == textwrap.dedent(
        f"""\
        # frozen requirements generated by pip-deepfreeze
        --pre
        --find-links {testpkgs}
        pkga==0.0.0
        pkgb==0.0.0
        """
    )


def test_sync_no_in_req(virtualenv_python, tmp_path):
    (tmp_path / "setup.py").write_text(
        textwrap.dedent(
            """\
            from setuptools import setup

            setup(name="theproject")
            """
        )
    )
    subprocess.check_call(
        [sys.executable, "-m", "pip_deepfreeze", "--python", virtualenv_python, "sync"],
        cwd=tmp_path,
    )
    assert (tmp_path / "requirements.txt").read_text() == textwrap.dedent(
        """\
        # frozen requirements generated by pip-deepfreeze
        """
    )


def test_python_not_found(tmp_path):
    runner = CliRunner()
    result = runner.invoke(app, ["--python", "this-is-not-a-python", "sync"])
    assert result.exit_code != 0
    assert "Python interpreter 'this-is-not-a-python' not found" in result.output


def test_not_editable(virtualenv_python, tmp_path):
    (tmp_path / "pyproject.toml").write_text(
        textwrap.dedent(
            """
            [build-system]
            requires = ["flit_core >=2,<3"]
            build-backend = "flit_core.buildapi"

            [tool.flit.metadata]
            module = "foobar"
            author = "Toto"
            """
        )
    )
    (tmp_path / "foobar.py").write_text(
        textwrap.dedent(
            """
            '''This is foobar'''
            __version__ = '0.0.1'
            """
        )
    )
    # install not editable by default
    subprocess.check_call(
        [sys.executable, "-m", "pip_deepfreeze", "--python", virtualenv_python, "sync"],
        cwd=tmp_path,
    )
    assert "foobar @ file://" in subprocess.check_output(
        [virtualenv_python, "-m", "pip", "freeze"],
        cwd=tmp_path,
        universal_newlines=True,
    )
    # force no-editable
    subprocess.check_call(
        [
            sys.executable,
            "-m",
            "pip_deepfreeze",
            "--python",
            virtualenv_python,
            "sync",
            "--no-editable",
        ],
        cwd=tmp_path,
    )
    assert "foobar @ file://" in subprocess.check_output(
        [virtualenv_python, "-m", "pip", "freeze"],
        cwd=tmp_path,
        universal_newlines=True,
    )
    # trying to force editable fails gracefully
    with pytest.raises(subprocess.CalledProcessError) as e:
        subprocess.run(
            [
                sys.executable,
                "-m",
                "pip_deepfreeze",
                "--python",
                virtualenv_python,
                "sync",
                "--editable",
            ],
            cwd=tmp_path,
            capture_output=True,
            check=True,
            universal_newlines=True,
        )
    assert "The project does not support editable installation." in e.value.stderr
